{"version":3,"sources":["components/Pagination.module.css","components/List.module.css","Layout/MainNavigation.module.css","modals/Modal.module.css","modals/ItemModal.module.css","Layout/Layout.module.css","Layout/Loader.module.css","Layout/Card.module.css","pages/Main.module.css","components/ListItem.module.css","pages/ItemsList.module.css","Layout/Card.js","modals/Modal.js","modals/ItemModal.js","models/Film.js","models/Person.js","models/Planet.js","models/Species.js","models/Starship.js","models/Vehicle.js","store/sw-context.js","Layout/MainNavigation.js","Layout/Layout.js","pages/Main.js","components/Pagination.js","components/ListItem.js","components/List.js","pages/Favorites.js","Layout/Loader.js","pages/ItemsList.js","App.js","index.js"],"names":["module","exports","Card","props","className","style","card","children","Modal","backdrop","modal","ItemModal","useState","links","setLinks","item","setItem","swContext","useContext","SWContext","getItemFromAPI","referenceType","url","fetchSWAPI","then","data","prevLinks","obj","dataToObj","undefined","id","catch","e","console","log","useEffect","prop","val","Array","isArray","i","length","startsWith","apiUrl","linksArr","Object","entries","map","typeName","objsHash","objId","itemLink","onClick","preventDefault","onItemLinkClick","name","detailedInfo","jsx","action","closeModal","isFavorite","removeFromFavorites","addToFavorites","Film","type","assign","this","release_date","convertDate","title","number","slice","dateStr","timeStamp","Date","parse","isNaN","date","paddingZeros","getDay","getMonth","getFullYear","episode_id","director","producer","opening_crawl","Person","speciesObjArr","birth_year","gender","eye_color","hair_color","height","mass","skin_color","Planet","diameter","population","climate","rotation_period","orbital_period","gravity","surface_water","Species","classification","designation","average_height","average_lifespan","eye_colors","hair_colors","language","Starship","model","starship_class","manufacturer","cost_in_credits","passengers","max_atmosphering_speed","crew","hyperdrive_rating","MGLT","cargo_capacity","consumables","Vehicle","vehicle_class","NAVS","SW_API","createContext","navs","favorites","favoritesCount","selectedItem","openModal","localStorageKey","SWContextProvider","setFavorites","setSelectedItem","keys","localStorage","forEach","key","JSON","getItem","prevFavorites","context","hasOwnProperty","stringify","removeItem","Promise","resolve","reject","fetch","response","ok","json","msg","statusText","value","substr","split","Provider","itemType","MainNavigation","navigation","to","menu","navItem","index","link","Layout","main","container","Main","Pagination","pages","currPage","push","num","classes","pageItem","text","page","totalPages","active","pagination","listUrl","ListItem","shortInfo","List","pageTitle","searchBar","placeholder","searchWord","onChange","event","setSearchWord","target","list","noResult","listItem","baseUrl","Favorites","searchWordChange","newSearchWord","setCurrPage","useParams","Math","ceil","setTotalPages","setList","filteredItem","values","filter","toLowerCase","includes","offset","Loader","loader","spinner","ItemsList","isLoading","setIsLoading","errorMsg","setError","count","tmpList","results","err","error","App","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe3aef4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__1hEEA\",\"pageItem\":\"Pagination_pageItem__1nO4J\",\"active\":\"Pagination_active__3AFvn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageTitle\":\"List_pageTitle__MhScD\",\"listItem\":\"List_listItem__1b9RF\",\"list\":\"List_list__2U4Ha\",\"searchBar\":\"List_searchBar__9Taic\",\"noResult\":\"List_noResult__7e3BB\",\"error\":\"List_error__3azqR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"MainNavigation_navigation__24y5P\",\"link\":\"MainNavigation_link__TuA9m\",\"menu\":\"MainNavigation_menu__1NUkH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2Ic2r\",\"backdrop\":\"Modal_backdrop__3E3-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemLink\":\"ItemModal_itemLink__1Gim4\",\"action\":\"ItemModal_action__1CghK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__1z72s\",\"main\":\"Layout_main__2TMZ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1m6z_\",\"spinner\":\"Loader_spinner__QAxvo\",\"spin\":\"Loader_spin__4GYan\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1ws5d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__1FQvp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"action\":\"ListItem_action__37hje\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noFound\":\"ItemsList_noFound__2R6SE\",\"error\":\"ItemsList_error__3vQ81\"};","import style from './Card.module.css';\r\n\r\n/**\r\n * Card component\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst Card = (props) => {\r\n    return <div className={style.card + ' background-secondary'}>{props.children}</div>\r\n}\r\n\r\nexport default Card;","import Card from '../Layout/Card';\r\nimport style from './Modal.module.css';\r\n\r\n/**\r\n * Modal\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst Modal = (props) => {\r\n    return <Card>\r\n        <div className={style.backdrop} >\r\n            <div className={style.modal + ' background-secondary'}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    </Card>;\r\n}\r\n\r\nexport default Modal;","import { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react/cjs/react.development\";\r\nimport SWContext from \"../store/sw-context\";\r\nimport Modal from \"./Modal\";\r\nimport style from './ItemModal.module.css';\r\n\r\n/**\r\n * Item modal component\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst ItemModal = (props) => {\r\n    // Holds references to other items that related to it\r\n    const [links, setLinks] = useState({});\r\n    const [item, setItem] = useState(props.item);\r\n    const swContext = useContext(SWContext);\r\n\r\n    /**\r\n     * On item link click\r\n     * @param {*} e \r\n     * @param {*} obj \r\n     */\r\n    function onItemLinkClick(e, obj) {\r\n        e.preventDefault();\r\n        setItem(obj); // Replace current item with obj\r\n    }\r\n\r\n    /**\r\n     * Get object from swapi and set it to the links hash\r\n     * @param {*} referenceType The reference type name ('pilots', 'residents' etc.)\r\n     * @param {*} url \r\n     */\r\n    function getItemFromAPI(referenceType ,url) {\r\n        swContext.fetchSWAPI(url) // Get item from swapi\r\n        .then(data => \r\n            setLinks(prevLinks => {\r\n                let obj = swContext.dataToObj(data); // Convert data to an object\r\n                if(obj) {\r\n                    if(prevLinks[referenceType] == undefined) { // Add referenceType hash (so we can add the object to it)\r\n                        prevLinks[referenceType] = {};\r\n                    }\r\n                    prevLinks[referenceType][obj.id] = obj; // Add object to the reference type hash\r\n                }\r\n                return {...prevLinks};\r\n            })\r\n        )\r\n        .catch(e => console.log('getItemFromAPI error', e))\r\n    }\r\n\r\n    // Get other items that related to this item (url references)\r\n    useEffect(() => {\r\n        setLinks({}); // Reset links\r\n        // Go over item properties and check if it has some url references (so we can get them from swapi)\r\n        for(let prop in item) {\r\n            if(prop == 'id' || prop == 'url') // id/url properties is the current item url\r\n                continue;\r\n            let val = item[prop];\r\n\r\n            // Get up to 5 items in an array\r\n            if(Array.isArray(val)) {\r\n                for(let i = 0 ; i < val.length && i < 5 ; i++) {\r\n                    if(val[i].startsWith(swContext.apiUrl))\r\n                        getItemFromAPI(prop, val[i]);\r\n                }\r\n            }\r\n            else if((typeof(val) == \"string\") && val.startsWith(swContext.apiUrl)) {\r\n                getItemFromAPI(prop, val);\r\n            }\r\n        }\r\n    }, [item]);\r\n    \r\n    // Make an array of references name and theirs items links.\r\n    let linksArr = Object.entries(links).map(([typeName, objsHash]) => {\r\n        return <p key={typeName}>{typeName}: \r\n            {\r\n                Object.entries(objsHash).map(([objId, obj]) => <a key={objId} className={style.itemLink} onClick={(e) => onItemLinkClick(e, obj)}>{obj.name}</a>)\r\n            }\r\n        </p>;\r\n    });\r\n\r\n    return <Modal>\r\n        {/* Item info */}\r\n        {item.detailedInfo()}\r\n        {/* Links to other items that related to this */}\r\n        {linksArr.map(jsx => jsx)}\r\n        <div className={style.action}>\r\n            <button className=\"btn-primary\" onClick={swContext.closeModal}>Close</button>\r\n            {/* Add/remove from favorites buttons */}\r\n            {swContext.isFavorite(item) ? \r\n                <button className=\"removeFavorite btn btn-primary\" onClick={() => swContext.removeFromFavorites(item)}>Remove from favorites</button> :\r\n                <button className=\"addFavorite btn btn-primary\" onClick={() => swContext.addToFavorites(item)}>Add to favorites</button>\r\n            }\r\n        </div>\r\n    </Modal>;\r\n}\r\n\r\nexport default ItemModal;","/**\r\n * Film\r\n */\r\nexport class Film {\r\n    title;\r\n    episode_id;\r\n    opening_crawl;\r\n    director;\r\n    producer;\r\n    release_date;\r\n    species;\r\n    starships;\r\n    vehicles;\r\n    characters;\r\n    planets;\r\n    type = \"films\";\r\n    id;\r\n    \r\n    // Get film title (all other object has \"name\" property)\r\n    get name() {\r\n        return this.title;\r\n    }\r\n\r\n    constructor(obj) {\r\n        obj && Object.assign(this, obj); // Copy object properties to Film\r\n        this.release_date = this.convertDate(this.release_date);\r\n    }\r\n\r\n    /**\r\n     * Pad a number with zeros\r\n     * @param {*} number\r\n     * @returns\r\n     */\r\n    paddingZeros(number) {\r\n        return (\"0\" + number).slice(-2);\r\n    }\r\n\r\n    /**\r\n     * Convert date to 'dd-mm-yyyy' format\r\n     * @param {*} dateStr\r\n     * @returns\r\n     */\r\n    convertDate(dateStr) {\r\n        let timeStamp = Date.parse(dateStr);\r\n        // Invalid date\r\n        if (isNaN(+timeStamp)) return false;\r\n        let date = new Date(timeStamp);\r\n        return `${this.paddingZeros(date.getDay())}-${this.paddingZeros(\r\n            date.getMonth() + 1\r\n        )}-${date.getFullYear()}`;\r\n    }\r\n\r\n    shortInfo() {\r\n        return (\r\n            <div>\r\n                <h2>\r\n                    {this.title} - Episode {this.episode_id}\r\n                </h2>\r\n                {this.release_date && <p>{this.release_date}</p>}\r\n                {this.director && \r\n                <p>Director: {this.director} - Producer: {this.producer}</p>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    detailedInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.title}</h2>\r\n                <p>Director: {this.director}</p>\r\n                <p>Producer: {this.producer}</p>\r\n                <p>Episode: {this.episode_id}</p>\r\n                {this.release_date && <p>Released on: {this.release_date}</p>}\r\n                <p>{this.opening_crawl}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Person\r\n */\r\nexport class Person {\r\n    name;\r\n    birth_year;\r\n    eye_color; // \"n/a\" if the person does not have an eye.\r\n    gender; // \"unknown\", \"n/a\" if the person does not have a gender.\r\n    hair_color; // Will be \"unknown\" if not known or \"n/a\" if the person does not have hair.\r\n    height; // centimeters.\r\n    mass; // kilograms.\r\n    skin_color;\r\n    homeworld; // The URL of a planet resource, a planet that this person was born on or inhabits.\r\n    films; // An array of film resource URLs that this person has been in.\r\n    species; // An array of species resource URLs that this person belongs to.\r\n    speciesObjArr = [];\r\n    starships; // An array of starship resource URLs that this person has piloted.\r\n    vehicles; // An array of vehicle resource URLs that this person has piloted.\r\n    type = \"people\";\r\n    id;\r\n\r\n    constructor(obj) {\r\n        obj && Object.assign(this, obj);\r\n    }\r\n\r\n    shortInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Birth year: {this.birth_year}</p>\r\n                {this.gender && <p>Gender: {this.gender}</p>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    detailedInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Birth year: {this.birth_year}</p>\r\n                {this.eye_color && <p>Eye color: {this.eye_color}</p>}\r\n                {this.gender && <p>Gender: {this.gender}</p>}\r\n                {this.hair_color && <p>Hair color: {this.hair_color}</p>}\r\n                <p>Height: {this.height} cm</p>\r\n                <p>Mass: {this.mass} kg</p>\r\n                <p>Skin color: {this.skin_color}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Planet\r\n */\r\nexport class Planet {\r\n    name; // string -- The name of this planet.\r\n    diameter; // string -- The diameter of this planet in kilometers.\r\n    rotation_period; // string -- The number of standard hours it takes for this planet to complete a single rotation on its axis.\r\n    orbital_period; // string -- The number of standard days it takes for this planet to complete a single orbit of its local star.\r\n    gravity; // string -- A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs.\r\n    population; // string -- The average population of sentient beings inhabiting this planet.\r\n    climate; // string -- The climate of this planet. Comma separated if diverse.\r\n    terrain; // string -- The terrain of this planet. Comma separated if diverse.\r\n    surface_water; // string -- The percentage of the planet surface that is naturally occurring water or bodies of water.\r\n    residents; // array -- An array of People URL Resources that live on this planet.\r\n    films; // array -- An array of Film URL Resources that this planet has appeared in.\r\n    type = \"planets\";\r\n    id;\r\n\r\n    constructor(obj) {\r\n        obj && Object.assign(this, obj);\r\n    }\r\n\r\n    shortInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Diameter: {this.diameter} km</p>\r\n                <p>Population: {this.population}</p>\r\n                <p>Climate: {this.climate}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    detailedInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Diameter: {this.diameter} km</p>\r\n                <p>Rotation period: {this.rotation_period} hours</p>\r\n                <p>Orbital period: {this.orbital_period} days</p>\r\n                <p>Gravity: {this.gravity} Gs</p>\r\n                <p>Population: {this.population}</p>\r\n                <p>Climate: {this.climate}</p>\r\n                <p>Surface water: {this.surface_water}%</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Species\r\n */\r\nexport class Species {\r\n    name; // string -- The name of this species.\r\n    classification; // string -- The classification of this species, such as \"mammal\" or \"reptile\".\r\n    designation; // string -- The designation of this species, such as \"sentient\".\r\n    average_height; // string -- The average height of this species in centimeters.\r\n    average_lifespan; // string -- The average lifespan of this species in years.\r\n    eye_colors; // string -- A comma-separated string of common eye colors for this species, \"none\" if this species does not typically have eyes.\r\n    hair_colors; // string -- A comma-separated string of common hair colors for this species, \"none\" if this species does not typically have hair.\r\n    skin_colors; // string -- A comma-separated string of common skin colors for this species, \"none\" if this species does not typically have skin.\r\n    language; // string -- The language commonly spoken by this species.\r\n    homeworld; // string -- The URL of a planet resource, a planet that this species originates from.\r\n    people; // array -- An array of People URL Resources that are a part of this species.\r\n    films; // array -- An array of Film URL Resources that this species has appeared in.\r\n    type = \"species\";\r\n    id;\r\n\r\n    constructor(obj) {\r\n        obj && Object.assign(this, obj);\r\n    }\r\n\r\n    shortInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Classification: {this.classification}</p>\r\n                <p>Designation: {this.designation}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    detailedInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Classification: {this.classification}</p>\r\n                <p>Designation: {this.designation}</p>\r\n                <p>Average height: {this.average_height} cm</p>\r\n                <p>Average lifespan: {this.average_lifespan} years</p>\r\n                <p>Eye colors: {this.eye_colors}</p>\r\n                <p>Hair colors: {this.hair_colors}</p>\r\n                <p>Skin color: {this.skin_color}</p>\r\n                <p>Language: {this.language}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Starship\r\n */\r\nexport class Starship {\r\n    name; //string -- The name of this starship. The common name, such as \"Death Star\".\r\n    model; //string -- The model or official name of this starship. Such as \"T-65 X-wing\" or \"DS-1 Orbital Battle Station\".\r\n    starship_class; //string -- The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\"\r\n    manufacturer; //string -- The manufacturer of this starship. Comma separated if more than one.\r\n    cost_in_credits; // string -- The cost of this starship new, in galactic credits.\r\n    length; // string -- The length of this starship in meters.\r\n    crew; // string -- The number of personnel needed to run or pilot this starship.\r\n    passengers; // string -- The number of non-essential people this starship can transport.\r\n    max_atmosphering_speed; // string -- The maximum speed of this starship in the atmosphere. \"N/A\" if this starship is incapable of atmospheric flight.\r\n    hyperdrive_rating; // string -- The class of this starships hyperdrive.\r\n    MGLT; // string -- The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe. This figure is only really useful for measuring the difference in speed of starships. We can assume it is similar to AU, the distance between our Sun (Sol) and Earth.\r\n    cargo_capacity; // string -- The maximum number of kilograms that this starship can transport.\r\n    consumables; // *string The maximum length of time that this starship can provide consumables for its entire crew without having to resupply.\r\n    films; // array -- An array of Film URL Resources that this starship has appeared in.\r\n    pilots; // array -- An array of People URL Resources that this starship has been piloted by.\r\n    type = \"Starships\";\r\n    id;\r\n\r\n    constructor(obj) {\r\n        obj && Object.assign(this, obj);\r\n    }\r\n\r\n    shortInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Model: {this.model}</p>\r\n                <p>Starship class: {this.starship_class}</p>\r\n                <p>Manufacturer: {this.manufacturer}</p>\r\n                <p>Cost in credits: {this.cost_in_credits}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    detailedInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Model: {this.model}</p>\r\n                <p>Starship class: {this.starship_class}</p>\r\n                <p>Manufacturer: {this.manufacturer}</p>\r\n                <p>Cost in credits: {this.cost_in_credits}</p>\r\n                <p>Length: {this.length} m</p>\r\n                <p>Passengers: {this.passengers}</p>\r\n                <p>Max atmosphering speed: {this.max_atmosphering_speed}</p>\r\n                <p>Language: {this.language}</p>\r\n                <p>Crew: {this.crew}</p>\r\n                <p>Hyperdrive rating: {this.hyperdrive_rating}</p>\r\n                <p>MGLT: {this.MGLT}</p>\r\n                <p>Cargo capacity: {this.cargo_capacity}</p>\r\n                <p>Consumables: {this.consumables}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Vehicle\r\n */\r\nexport class Vehicle {\r\n    name; // string -- The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\".\r\n    model; // string -- The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\".\r\n    vehicle_class; // string -- The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\".\r\n    manufacturer; // string -- The manufacturer of this vehicle. Comma separated if more than one.\r\n    length; // string -- The length of this vehicle in meters.\r\n    cost_in_credits; // string -- The cost of this vehicle new, in Galactic Credits.\r\n    crew; // string -- The number of personnel needed to run or pilot this vehicle.\r\n    passengers; // string -- The number of non-essential people this vehicle can transport.\r\n    max_atmosphering_speed; // string -- The maximum speed of this vehicle in the atmosphere.\r\n    cargo_capacity; // string -- The maximum number of kilograms that this vehicle can transport.\r\n    consumables; // *string The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply.\r\n    films; // array -- An array of Film URL Resources that this vehicle has appeared in.\r\n    pilots; // array -- An array of People URL Resources that this vehicle has been piloted by.\r\n    type = \"vehicles\";\r\n    id;\r\n\r\n    constructor(obj) {\r\n        obj && Object.assign(this, obj);\r\n    }\r\n\r\n    shortInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Model: {this.model}</p>\r\n                <p>Vehicle class: {this.vehicle_class}</p>\r\n                <p>Manufacturer: {this.manufacturer}</p>\r\n                <p>Cost in credits: {this.cost_in_credits} years</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    detailedInfo() {\r\n        return (\r\n            <div>\r\n                <h2>{this.name}</h2>\r\n                <p>Model: {this.model}</p>\r\n                <p>Vehicle class: {this.vehicle_class}</p>\r\n                <p>Manufacturer: {this.manufacturer}</p>\r\n                <p>Cost in credits: {this.cost_in_credits} years</p>\r\n                <p>Crew: {this.crew}</p>\r\n                <p>Length: {this.length} m</p>\r\n                <p>Passengers: {this.passengers}</p>\r\n                <p>Max atmosphering speed: {this.max_atmosphering_speed}</p>\r\n                <p>MGLT: {this.MGLT}</p>\r\n                <p>Cargo capacity: {this.cargo_capacity}</p>\r\n                <p>Consumables: {this.consumables}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { createContext } from \"react\";\r\nimport { useEffect, useState } from \"react/cjs/react.development\";\r\nimport ItemModal from \"../modals/ItemModal\";\r\nimport { Film } from \"../models/Film\";\r\nimport { Person } from \"../models/Person\";\r\nimport { Planet } from \"../models/Planet\";\r\nimport { Species } from \"../models/Species\";\r\nimport { Starship } from \"../models/Starship\";\r\nimport { Vehicle } from \"../models/Vehicle\";\r\n\r\n// Navigation array\r\nconst NAVS = [\r\n    { type:'films', title: \"Films\" },\r\n    { type:'people', title: \"People\" },\r\n    { type:'planets', title: \"Planets\" },\r\n    { type:'species', title: \"Species\" },\r\n    { type:'vehicles', title: \"Vehicle\" },\r\n    { type:'starships', title: \"Starships\" }\r\n];\r\n\r\n// The Star Wars api url\r\nconst SW_API = 'https://swapi.dev/api';\r\n\r\nconst SWContext = createContext({\r\n    navs: NAVS,\r\n    apiUrl: SW_API,\r\n    favorites: {},\r\n    isFavorite: (item) => {},\r\n    addToFavorites: (item) => {},\r\n    removeFromFavorites: (item) => {},\r\n    favoritesCount: 0,\r\n    dataToObj: (data) => {},\r\n    fetchSWAPI: (url) => {},\r\n    selectedItem: undefined,\r\n    closeModal: () => {},\r\n    openModal: (item) => {}\r\n});\r\n\r\nconst localStorageKey = \"sw-favorite-\";\r\n\r\nexport function SWContextProvider(props) {\r\n    const [favorites, setFavorites] = useState({});\r\n    // Reference to an item that that user clicked \"Show more info\" (undefined means no item was selected)\r\n    const [selectedItem, setSelectedItem] = useState(undefined);\r\n\r\n    // Get favorites from local storage\r\n    useEffect(() => {\r\n        Object.keys(localStorage).forEach(function(key) {\r\n            try {\r\n                // We found an item with suffix 'sw-favorite-'\r\n                if(key.startsWith(localStorageKey)) {\r\n                    // Try to convert it to a json\r\n                    let item = JSON.parse(localStorage.getItem(key));\r\n                    // Item has mandatory fields, let's try to covert it to an object (Film, Person, etc.)\r\n                    if(item[\"id\"] && item[\"type\"] && item[\"name\"]) {\r\n                        setFavorites(prevFavorites => {\r\n                            let obj = dataToObj(item);\r\n                            if(obj) // The object convert succeeded\r\n                                prevFavorites[item.id] = obj;\r\n                            \r\n                            return {...prevFavorites}\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            catch(e) {\r\n                console.log('Get favorites error:', e)\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const context = {\r\n        navs: NAVS,\r\n        apiUrl: SW_API,\r\n        favorites: favorites,\r\n        isFavorite: isFavorite,\r\n        addToFavorites: addToFavorites,\r\n        removeFromFavorites: removeFromFavorites,\r\n        favoritesCount: Object.keys(favorites).length,\r\n        dataToObj: dataToObj,\r\n        fetchSWAPI: fetchSWAPI,\r\n        selectedItem: selectedItem,\r\n        closeModal: closeModal,\r\n        openModal: openModal\r\n        \r\n    };\r\n\r\n    /**\r\n     * Close modal\r\n     */\r\n     function closeModal() {\r\n        setSelectedItem(undefined);\r\n    }\r\n\r\n    /**\r\n     * Open modal\r\n     * @param {*} item \r\n     */\r\n    function openModal(item) {\r\n        setSelectedItem(item);\r\n    }\r\n\r\n    /**\r\n     * Add to favorites\r\n     * @param {*} item \r\n     * @returns \r\n     */\r\n    function addToFavorites(item) {\r\n        if(!item.id)\r\n            return;\r\n\r\n        // Try to save item\r\n        try {\r\n            setFavorites(prevFavorites => {\r\n                prevFavorites[item.id] = item;\r\n                return {...prevFavorites};\r\n            });\r\n            localStorage.setItem(localStorageKey + item.id, JSON.stringify(item));\r\n        }\r\n        catch(e) {\r\n            console.log('Save favorite error:', e)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove from favorites\r\n     * @param {*} item \r\n     * @returns \r\n     */\r\n    function removeFromFavorites(item) {\r\n        if(!item.id)\r\n            return;\r\n        \r\n        setFavorites(prevFavorites => {\r\n            // Remove item entry from favorites hash\r\n            delete prevFavorites[item.id]\r\n            return {...prevFavorites};\r\n        });\r\n\r\n        // Remove item\r\n        localStorage.removeItem(localStorageKey + item.id);\r\n    }\r\n\r\n    /**\r\n     * Check if item exists in favorites hash\r\n     * @param {*} item \r\n     * @returns \r\n     */\r\n    function isFavorite(item) {\r\n        return favorites.hasOwnProperty(item.id);\r\n    }\r\n\r\n    function clearUnknown(value) {\r\n        if (value == \"n/a\" || value == \"unknown\") return \"\";\r\n        return value;\r\n    }\r\n    \r\n    /**\r\n     * Convert data from swapi to an object (Film, Person, etc.)\r\n     * @param {*} itemType\r\n     * @param {*} data\r\n     * @returns\r\n     */\r\n    function dataToObj(data) {\r\n        // Clear unknown values\r\n        for(let prop in data) {\r\n            data[prop] = clearUnknown(data[prop]);\r\n            // We don't want item without a name\r\n            if((prop == 'name' || prop == 'title') && !data[prop])\r\n                return false;\r\n        }\r\n\r\n        // Add id property (person/1, films/5, etc.)\r\n        if(data[\"url\"] && data.url.startsWith(SW_API)) {\r\n            data.id = data.url.substr(SW_API.length + 1);\r\n            data.type = data.id.split('/')[0];\r\n        }\r\n\r\n        switch (data.type) {\r\n            case \"films\":\r\n                return new Film(data);\r\n            case \"people\":\r\n                return new Person(data);\r\n            case \"planets\":\r\n                return new Planet(data);\r\n            case \"species\":\r\n                return new Species(data);\r\n            case \"starships\":\r\n                return new Starship(data);\r\n            case \"vehicles\":\r\n                return new Vehicle(data);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Fetch swapi url and return the response.\r\n     * @param {*} url\r\n     * @returns Promise => resolve:JSON, reject:string\r\n     */\r\n    function fetchSWAPI(url) {\r\n        // Fetch swapi\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url).then((response) => {\r\n                if(response.ok)\r\n                    // Process response and convert it to json\r\n                    resolve(response.json());\r\n                else {\r\n                    // API throws error\r\n                    let msg = response.statusText\r\n                        ? response.statusText\r\n                        : \"Something went wrong, please try again later.\";\r\n                    reject(msg);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    return <SWContext.Provider value={context}>\r\n        {props.children}\r\n        {/* Show item modal */}\r\n        {selectedItem && <ItemModal itemType={selectedItem.type} item={selectedItem} closeModal={closeModal}></ItemModal>}\r\n    </SWContext.Provider>\r\n};\r\n\r\nexport default SWContext;","import { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SWContext from \"../store/sw-context\";\r\nimport Card from \"./Card\";\r\nimport style from \"./MainNavigation.module.css\";\r\n\r\n/**\r\n * Main navigation component\r\n * @returns \r\n */\r\nconst MainNavigation = () => {\r\n    const swContext = useContext(SWContext);\r\n\r\n    return <Card>\r\n        <div className={style.navigation}>\r\n            <h1><Link className=\"yellow\" to=\"/\">Star Wars</Link></h1>\r\n            <div className={style.menu}>\r\n                {/* Links like: Films, Pepople, etc. */}\r\n                {swContext.navs.map((navItem, index) => (\r\n                    <Link key={index} className={style.link + ' yellow'} to={'/' + navItem.type}>{navItem.title}</Link>\r\n                ))}\r\n                {/* Favorites link */}\r\n                {swContext.favoritesCount > 0 && <Link className={style.link + ' yellow'} to=\"/favorites\">Favorites ({swContext.favoritesCount})</Link>}\r\n            </div>\r\n        </div>\r\n    </Card>;\r\n};\r\n\r\nexport default MainNavigation;\r\n","import MainNavigation from \"./MainNavigation\"\r\nimport style from './Layout.module.css';\r\n\r\n/**\r\n * Layout component.\r\n * Wrap the navigation menu and routes.\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst Layout = (props) => {\r\n    return <div className={style.main + \" background-primary\"}>\r\n        <MainNavigation/>\r\n        <div className={style.container}>{props.children}</div>\r\n    </div>;\r\n}\r\n\r\nexport default Layout;","import { Link } from 'react-router-dom';\r\nimport style from './Main.module.css';\r\n/**\r\n * Main page\r\n * @returns \r\n */\r\nconst Main = () => {\r\n    return <div className={style.main + \" background-secondary\"}>\r\n        <h2>Welcome to the Star Wars website!</h2>\r\n        <p>We have all Star Wars data you've ever wanted:</p>\r\n        <p><Link to=\"/planets\">Planets</Link>, <Link to=\"/starships\">Spaceships</Link>, <Link to=\"/vehicles\">Vehicles</Link>, <Link to=\"/people\">People</Link>, <Link to=\"/films\">Films</Link> and <Link to=\"/species\">species</Link></p> \r\n        <p>From all SEVEN Star Wars films</p>\r\n    </div>;\r\n}\r\n\r\nexport default Main;","import { Link } from \"react-router-dom\";\r\nimport style from \"./Pagination.module.css\";\r\n\r\n/**\r\n * Pagination component\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst Pagination = (props) => {\r\n    var pages = [];\r\n\r\n    // Add previous button\r\n    if(props.currPage > 1) {\r\n        pages.push({\r\n            num:props.currPage - 1,\r\n            classes:style.pageItem,\r\n            text:'<<'\r\n        });\r\n    }\r\n\r\n    // Add 1...N page buttons\r\n    for(let page=1; page<=props.totalPages ; page++) {\r\n        var classes = style.pageItem;\r\n        if(page == props.currPage) {\r\n            classes += ' ' + style.active;\r\n        }\r\n        pages.push({\r\n            num:page,\r\n            classes:classes,\r\n            text:page\r\n        });\r\n    }\r\n\r\n    // Add 'next' button\r\n    if(props.currPage < props.totalPages) {\r\n        pages.push({\r\n            num:props.currPage + 1,\r\n            classes:style.pageItem,\r\n            text:'>>'\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={style.pagination}>\r\n            {pages.map(page => \r\n                <div key={page.text} className={page.classes + ' background-secondary yellow'}>\r\n                    <Link to={'/' + props.listUrl + '/' + page.num}>{page.text}</Link>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import { useContext } from \"react\";\r\nimport Card from \"../Layout/Card\";\r\nimport SWContext from \"../store/sw-context\";\r\nimport style from './ListItem.module.css';\r\n\r\n/**\r\n * List item\r\n * Present an item in a list\r\n */\r\nconst ListItem = (props) => {\r\n    const swContext = useContext(SWContext);\r\n    \r\n    return <Card>\r\n        {/* Show short info about this item */}\r\n        {props.item.shortInfo()}\r\n        <div className={style.action}>\r\n            <button className=\"btn btn-primary\" onClick={() => swContext.openModal(props.item)}>Show more info</button>\r\n            {/* Add to favorites or it remove */}\r\n            {swContext.isFavorite(props.item) ? \r\n                <button className=\"removeFavorite btn btn-primary\" onClick={() => swContext.removeFromFavorites(props.item)}>Remove from favorites</button> :\r\n                <button className=\"addFavorite btn btn-primary\" onClick={() => swContext.addToFavorites(props.item)}>Add to favorites</button>\r\n            }\r\n        </div>\r\n    </Card>;\r\n}\r\n\r\nexport default ListItem;","import Pagination from \"../components/Pagination\";\r\nimport ListItem from \"../components/ListItem\";\r\nimport style from \"./List.module.css\";\r\n\r\n/**\r\n * List component\r\n * Shows items list with pagination and a search bar\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst List = (props) => {\r\n\r\n    /**\r\n     * On search word change\r\n     * @param {*} event \r\n     */\r\n    function searchChange(event) {\r\n        props.setSearchWord(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className={style.pageTitle}>{props.title}</h1>\r\n            <div>\r\n                {/* Search bar */}\r\n                <input\r\n                    className={style.searchBar + ' background-secondary'}\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    value={props.searchWord}\r\n                    onChange={searchChange}\r\n                />\r\n            </div>\r\n            {/* Items list or 'No result found' */}\r\n            {props.list.length == 0 ? \r\n                <div className={style.noResult}><p>No result found</p></div> : \r\n                <div className={style.list}>\r\n                    {props.list.map((item, index) => (\r\n                        <div key={index} className={style.listItem}>\r\n                            <ListItem itemType={item.type} item={item}/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            }\r\n            {/* Pagination */}\r\n            {props.totalPages > 1 && (\r\n                <Pagination\r\n                    currPage={props.currPage}\r\n                    totalPages={props.totalPages}\r\n                    listUrl={props.baseUrl}\r\n                ></Pagination>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default List;","import { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport SWContext from \"../store/sw-context\";\r\nimport List from \"../components/List\";\r\n\r\n/**\r\n * Favorites component\r\n * Gets and shows a list of 10 favorites items\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst Favorites = () => {\r\n    const LIMIT = 10;\r\n    const swContext = useContext(SWContext);\r\n\r\n    /**\r\n     * On search word change\r\n     * @param {*} newSearchWord \r\n     */\r\n     function searchWordChange(newSearchWord) {\r\n        setSearchWord(newSearchWord);\r\n        setCurrPage(1); // Reset current page to 1\r\n    }\r\n\r\n    // Get the 'page' router param\r\n    let { page } = useParams();\r\n    const [totalPages, setTotalPages] = useState(swContext.favoritesCount <= LIMIT ? 1 : Math.ceil(swContext.favoritesCount/10));\r\n\r\n    // On page change\r\n    useEffect(() => {\r\n        // Make sure page number is valid\r\n        page = isNaN(+page) || +page < 1 ? 1 : +page;\r\n        if(page >= totalPages) {\r\n            page = totalPages;\r\n        }\r\n        // Set current page\r\n        if(page != currPage) {\r\n            setCurrPage(page);\r\n        }\r\n    }, [page, totalPages]);\r\n    \r\n    // Holds the items list\r\n    const [list, setList] = useState([]);\r\n    const [searchWord, setSearchWord] = useState(\"\");\r\n    const [currPage, setCurrPage] = useState(page);\r\n\r\n    // Set a new list when favorites, search word or the current page was changed\r\n    useEffect(() => {\r\n        \r\n        // Current page is invalid, set it to the last page\r\n        if(currPage > totalPages) {\r\n            setCurrPage(totalPages);\r\n        }\r\n\r\n        // Get filtered items array\r\n        let filteredItem = Object.values(swContext.favorites)\r\n        .filter(item => searchWord == '' || item.name.toLowerCase().includes(searchWord.toLowerCase()));\r\n\r\n        let offset = (currPage-1)*LIMIT;\r\n        setList(filteredItem.slice(offset, offset + 10));\r\n\r\n        // Set total\r\n        setTotalPages(filteredItem.length <= LIMIT ? 1 : Math.ceil(filteredItem.length/10));\r\n    }, [searchWord, currPage, swContext.favorites]);\r\n    \r\n    return (\r\n        <List baseUrl=\"favorites\" list={list} totalPages={totalPages} searchWord={searchWord} currPage={currPage} title=\"Favorites\" setSearchWord={(newSearchWord) => searchWordChange(newSearchWord)}/>\r\n    );\r\n};\r\n\r\nexport default Favorites;","import style from './Loader.module.css';\r\n\r\n/**\r\n * Loader component\r\n * Use to show a loading spinner\r\n * @returns \r\n */\r\nconst Loader = () => {\r\n    return <div className={style.loader}>\r\n        <div className={style.spinner}></div>\r\n    </div>;\r\n}\r\n\r\nexport default Loader;","import { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Loader from \"../Layout/Loader\";\r\nimport SWContext from \"../store/sw-context\";\r\nimport style from './ItemsList.module.css';\r\nimport List from \"../components/List\";\r\n\r\n/**\r\n * Items list component\r\n * Gets and shows a list of 10 item for a specific item type (films, people etc.)\r\n * @param {*} props \r\n * @returns \r\n */\r\nconst ItemsList = (props) => {\r\n    const swContext = useContext(SWContext);\r\n\r\n    /**\r\n     * On search word change\r\n     * @param {*} newSearchWord \r\n     */\r\n    function searchWordChange(newSearchWord) {\r\n        setSearchWord(newSearchWord);\r\n        setCurrPage(1); // Reset current page to 1\r\n    }\r\n\r\n    // Get the 'page' router param\r\n    let { page } = useParams();\r\n    page = isNaN(+page) || +page < 1 ? 1 : +page; // Make sure page is a valid number\r\n    \r\n    // Should we show a loading spinner?\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    // Holds the items list\r\n    const [list, setList] = useState([]);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n    const [searchWord, setSearchWord] = useState(\"\");\r\n    const [currPage, setCurrPage] = useState(page);\r\n    const [errorMsg, setError] = useState('');\r\n\r\n    // Set the page number in case it was changed\r\n    useEffect(() => {\r\n        if(currPage != page && page <= totalPages)\r\n            setCurrPage(page);\r\n    },[page])\r\n\r\n    \r\n\r\n    // Get items from swapi on initialize, or when the search/page/type have been changed\r\n    useEffect(() => {\r\n        // Api url\r\n        var apiUrl = `${swContext.apiUrl}/${props.type}?page=${currPage}`;\r\n        // Add search word to url\r\n        if(searchWord) \r\n            apiUrl += `&search=${searchWord}`;\r\n        \r\n        // Fetch url and get data as json\r\n        swContext.fetchSWAPI(apiUrl)\r\n        .then((data) => {\r\n            // Count how many pages do we have\r\n            let totalPages = isNaN(+data.count) && +data.count < 1 ? 1 : Math.ceil(+data.count / 10);\r\n\r\n            // Convert data to objects\r\n            let tmpList = [];\r\n            for(let item of data.results) {\r\n                let obj = swContext.dataToObj(item);\r\n                if(obj)\r\n                    tmpList.push(obj);\r\n            }\r\n\r\n            setList(tmpList); // Set array of items\r\n            setIsLoading(false); // Remove loading spinner\r\n            setTotalPages(totalPages); // Set the new total pages\r\n            setError(''); // Clear error message\r\n        })\r\n        .catch((err) => { // Ops, we got an error...\r\n            setError(err); // Set error\r\n            console.log(`fetch(${apiUrl}) error:`,err);\r\n        });\r\n    }, [props.type, currPage, searchWord]);\r\n\r\n    // Show error message\r\n    if(errorMsg != '') {\r\n        return <div className={style.error}>{errorMsg}</div>;\r\n    }\r\n\r\n    // Show loading spinner\r\n    if (isLoading) {\r\n        return <Loader/>;\r\n    }\r\n\r\n    return (\r\n        <List baseUrl={props.type} list={list} totalPages={totalPages} searchWord={searchWord} currPage={currPage} title={props.title} setSearchWord={(newSearchWord) => searchWordChange(newSearchWord)}/>\r\n    );\r\n};\r\n\r\nexport default ItemsList;","import { useContext } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Layout from \"./Layout/Layout\";\r\nimport Main from \"./pages/Main\";\r\nimport SWContext from \"./store/sw-context\";\r\nimport Favorites from \"./pages/Favorites\";\r\nimport ItemsList from \"./pages/ItemsList\";\r\n\r\nfunction App() {\r\n    const swContext = useContext(SWContext);\r\n    return <Layout>\r\n        <Switch>\r\n            {/* Main */}\r\n            <Route path=\"/\" exact={true}>\r\n                <Main/>\r\n            </Route>\r\n            {/* Films, People, etc. */}\r\n            {swContext.navs.map(navItem => (\r\n                <Route path={'/' + navItem.type + '/:page?'} key={navItem.type}>\r\n                    <ItemsList type={navItem.type} title={navItem.title} />\r\n                </Route>\r\n            ))}\r\n            {/* Favorites */}\r\n            <Route path={\"/favorites/:page?\"}>\r\n                <Favorites/>\r\n            </Route>\r\n        </Switch>\r\n    </Layout>;\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { SWContextProvider } from \"./store/sw-context\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <SWContextProvider>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </SWContextProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}